<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: git | 3度の飯と最新技術]]></title>
  <link href="http://endorno.github.io/blog/categories/git/atom.xml" rel="self"/>
  <link href="http://endorno.github.io/"/>
  <updated>2013-10-06T22:16:08+09:00</updated>
  <id>http://endorno.github.io/</id>
  <author>
    <name><![CDATA[endorno]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[もう巨大なデータをgitignoreしなくていい！ ~git-mediaの使い方~]]></title>
    <link href="http://endorno.github.io/blog/2013/10/06/how-to-use-git-media/"/>
    <updated>2013-10-06T15:18:00+09:00</updated>
    <id>http://endorno.github.io/blog/2013/10/06/how-to-use-git-media</id>
    <content type="html"><![CDATA[<h2>はじめに</h2>

<p>gitはコミットごとにレポジトリ内のファイル全てをスナップショットとして保存するというリッチな
設計になっている。<br/>
それがgitの便利さの所以なのだが画像データや音声データのようなバイナリデータを持とうとすると
少しの変更でもそのたびにコピーが生じてファイルサイズ分の容量が増えることになり、あっという間にレポジトリが
肥大化してしまう。<br/>
特に学習結果をファイルに保持してテスト等に使いまわすようなプログラムを管理しようとすると
アルゴリズムのパラメータを少し変えるたびに100kB近い容量が増えていき、実にイケてない。</p>

<p>普通なら.gitignoreに*.xmlと書いてデータ自体は手動管理したり、シンボリックリンクにして別ディレクトリに置いてそれだけrsyncで同期するようにしたりするんだが
過去の実験時の状態に戻れなかったり、毎回rsyncするのは不便だった。
なんか無いかなーと思ってstack overflowを彷徨ってたら<a href="https://github.com/schacon/git-media">git-media</a>っていうのを見つけたので導入してみた。</p>

<p>このプラグインを使うとgitのコミット/チェックアウトの時にトリガ機能を使ってデータファイルを自動でハッシュに変換して
指定した場所に転送してくれる。<br/>
<em>(注:ハッシュ=SHA1を用いて生成した、データに対して一意な40字の文字列)</em></p>

<p>ファイルのバージョン自体はハッシュで管理されるので昔のものをチェックアウトすれば自動的に古いデータに逆変換されるという仕様である。<br/>
便利そうに聞こえるがコマンドや構造の概念が少し複雑で、日本語の解説記事もなかったので入りづらかった。　　
コードを読んで理解してから使ってみたら実際にはほとんど裏の複雑さを意識する必要はなく、とても使い心地がよかったのでまとめておく。</p>

<!-- more -->


<h2>概念</h2>

<p>git-mediaを理解するときに大事なのがワーキングツリーとレポジトリの違い。<br/>
それぞれ簡単に言ってしまえばワーキングツリーは実際に作業しているディレクトリやファイルのそのもののことで、
レポジトリは.git以下にある、git管理下に収まったファイルのことである。<br/>
普通のgitではcommitやチェックアウトを使ってこれらの二つの同期をとっていく（インデックスは単純化のため無視）</p>

<p><img src="/images/entry/2013/git-normal-commit.png" title="&lsquo;normal git commit&rsquo; &lsquo;commit image&rsquo;" ></p>

<p>git-mediaを導入するとデータファイルにおいてこの二つに差分が生じる。
ワーキングツリーにおけるデータファイルはレポジトリの中では40字の一意なハッシュに置換される。</p>

<p><img src="/images/entry/2013/git-media-commit.png" title="&lsquo;git-media commit&rsquo; &lsquo;commit image&rsquo;" ></p>

<p>これにより、実際に使うファイルとしてはちゃんとしたデータを持ちつつ、
レポジトリ内ではハッシュで変更を管理できるようになる。
また、ハッシュからデータへの逆置換はそのコミットをチェックアウトするまで必要ないので
git clone時に無駄なファイルをダウンロードする必要も無くなる。</p>

<h2>インストール</h2>

<p><a href="https://github.com/schacon/git-media#installing-">git-media</a> に書いてあるとおりでおｋ。<br/>
今だとgit-media-0.1.2が入ることに注意</p>

<h2>実際の使い方</h2>

<p>基本的には<a href="https://github.com/schacon/git-media">git-media</a>のREADMEを読めば全部書いてある。<br/>
ただ、単語が省略されてたりしてわかりにくいので軽く補足を入れながら再解説をする。</p>

<h3>はじめにインストールしたらすること</h3>

<ul>
<li>フィルタの設定<br/>
  git config &mdash;global filter.media.clean &lsquo;git-media filter-clean'<br/>
  git config &mdash;global filter.media.smudge 'git-media filter-smudge&rsquo;</li>
</ul>


<p>これがワーキングツリーとレポジトリの間に差分を生むおまじない。コミット時とチェックアウト時にファイルの中身に処理をかけれる。<br/>
詳しくは<a href="http://git-scm.com/book/ja/Git-%E3%81%AE%E3%82%AB%E3%82%B9%E3%82%BF%E3%83%9E%E3%82%A4%E3%82%BA-Git-%E3%81%AE%E5%B1%9E%E6%80%A7">gitの属性</a> を参照。個人的には目から鱗だった。他にも使えそう。</p>

<ul>
<li>ファイルの転送先の設定
  vim ~/.gitconfig<br/>
  以下を追記  (SCPで管理する場合)
  [git-media]<br/>
    transport = scp<br/>
    scpuser = [ユーザーID]<br/>
    scphost = [ホスト]<br/>
    scpport = [ポート]<br/>
    scppath = [絶対パス]</li>
</ul>


<p>これでそのPC内で使うgit-mediaのファイルが全てscppath以下に格納される。<br/>
もしレポジトリごとにディレクトリを分けたり、そもそもscpだけでなくS3や、
実験的にlocalディレクトリを使いたいとかであれば各レポジトリの.git/configに同じように書く。</p>

<h3>各レポジトリごとにすること</h3>

<ul>
<li>どのファイルをフィルタに通すかの指定<br/>
  touch .gitattributes<br/>
  echo &lsquo;*.xml filter=media -crlf&rsquo; >> .gitattributes<br/>
  echo &lsquo;*.avi filter=media -crlf&rsquo; >> .gitattributes</li>
</ul>


<h3>コマンドの使い方</h3>

<p>media sync/media status/media clearという3つのコマンドが用意されているが
gitによくある、何に対してどういう方向でxxxされるのかわかりづらい問題があるので
簡単に説明する。<br/>
関係するのは</p>

<ol>
<li>ローカル：ワーキングツリーの中にあるローカルファイル</li>
<li>キャッシュ：.git/mediaの中にあるキャッシュ (≠リポジトリ管理下のファイル)</li>
<li>リモート：configで設定したtransport先にあるリモートファイル</li>
</ol>


<p>の3つ。レポジトリは基本的に関係しない。
出力文中にexpandという言葉が使われているが、これはローカルにあるハッシュファイル（逆置換にミスったもの。普通はデータになってる）をキャッシュに存在するデータファイルで置き換えることを意味する。</p>

<h4>git media sync</h4>

<p>内部ではexpand_referenceという処理とupload_local_cacheという処理が走っている。<br/>
前者はリモート->キャッシュ->ローカルという順でダウンロードおよびコピーを行い、後者はキャッシュ->リモートでアップロードを行う（もちろんコピー済みのものはコピーしない）</p>

<h4>git media status</h4>

<p>リモート&lt;&ndash;>キャッシュ&lt;&ndash;>ローカルの差分を表示するコマンド。<br/>
具体的には、media-syncでexpand_referenceとupload_local_cacheの対象となるファイルの一覧が出力される。<br/>
ローカルにあるにも関わらずハッシュのままのファイルがto_expand。<br/>
既に正しくデータになっているファイルがexpanded。<br/>
レポジトリに存在するのにローカル（＝ワーキングツリー）に無いファイルがdeletedである。<br/>
また、upload_local_chaceの対象となるファイルのために、リモートと
キャッシュの差分を調べ、すでにリモートにあるをpushd media、まだ無いファイルを
unpushed mediaとして表示する。</p>

<h4>git media clear</h4>

<p>リモートに送信済みのキャッシュのファイルを削除する。</p>

<h3>まとめ</h3>

<p>syncにリモート->キャッシュ->ローカルという処理とキャッシュ->リモートという処理が混ざっているせいでわかりにくいが、
使うのは、smudgeフィルタがキャッシュに無いデータをローカルにexpandしようとして失敗し、
ハッシュファイルが現れてしまった時（media missing っていう警告が出る）とpushの時だと思っていいと思う。前者は普通にsmudgeフィルタの処理に組み込めばいいじゃんと思うんだが、コード中にはTODOと書かれたまま放置されてる。
なんでだろう？謎</p>

<p>長く運用したわけじゃないからそんなに自信はないが、ハッシュ管理のおかげでコンフリクトはありえ無いので
基本的にsyncしまくってれば問題なさそう。なのでstatusは基本的に使ってない。
またディスク容量さえ気にならなければキャッシュが膨れても何も影響しないのでclearも基本的に使ってない。</p>

<h2>所感</h2>

<p>YAPC::Asia Tokyo 2013でGitの話を聞いてからgitの内部の仕組みに興味を持っていたんだが、
git-mediaのアプローチはとても参考になった。rubyでgitコマンドが拡張できるとことか、
smudge/cleanフィルターの存在とかも初めて知った。</p>

<p>webサービスの開発をしてると、やっぱりgitにも使いにくいところがちらほらあって、今は運用や汚い方法でカバーしてるんだけど、
git本体の拡張で解決できればクールだなーと思った。
とりあえずrubyからgitが操作できるようになる<a href="https://github.com/mojombo/grit">Grit</a>や<a href="https://github.com/libgit2/rugged">Rugged</a>が色々できそうだったのでそっちも見て見ようと思う。</p>
]]></content>
  </entry>
  
</feed>
